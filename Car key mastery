-- 基本服務與玩家
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- GUI 主體
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
ScreenGui.Name = "MaolingHub"

-- 修正：主框架樣式
local Frame = Instance.new("Frame", ScreenGui)
Frame.Size = UDim2.new(0, 450, 0, 350)
Frame.Position = UDim2.new(0.5, -225, 0.5, -175)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
Frame.BorderSizePixel = 0
Frame.Active = true
Frame.Draggable = true

-- 添加漸層效果
local gradient = Instance.new("UIGradient", Frame)
gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 35)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 50))
}
gradient.Rotation = 45

-- 添加外發光效果
local stroke = Instance.new("UIStroke", Frame)
stroke.Color = Color3.fromRGB(100, 150, 255)
stroke.Thickness = 2
stroke.Transparency = 0.5

Instance.new("UICorner", Frame).CornerRadius = UDim.new(0, 15)

-- 修正：標題樣式
local Title = Instance.new("TextLabel", Frame)
Title.Size = UDim2.new(1, -80, 0, 50)
Title.Position = UDim2.new(0, 15, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "✨ 貓玲的腳本區 ✨車鑰匙v0.20"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 22
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextXAlignment = Enum.TextXAlignment.Left

-- 添加標題發光效果
local titleStroke = Instance.new("UIStroke", Title)
titleStroke.Color = Color3.fromRGB(100, 150, 255)
titleStroke.Thickness = 1
titleStroke.Transparency = 0.3

-- 修正：關閉按鈕樣式和功能
local Close = Instance.new("TextButton", Frame)
Close.Size = UDim2.new(0, 35, 0, 35)
Close.Position = UDim2.new(1, -40, 0, 8)
Close.Text = "x"
Close.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
Close.TextColor3 = Color3.fromRGB(255, 255, 255)
Close.Font = Enum.Font.GothamBold
Close.TextSize = 18
Close.BorderSizePixel = 0

-- 添加關閉按鈕效果
local closeGradient = Instance.new("UIGradient", Close)
closeGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(220, 60, 60)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(180, 40, 40))
}

Instance.new("UICorner", Close).CornerRadius = UDim.new(0, 8)

-- 修正：關閉按鈕功能
Close.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
    _G.maolingHubLoaded = false -- 重置載入狀態
end)

-- 修正：最小化按鈕樣式
local Minimize = Instance.new("TextButton", Frame)
Minimize.Size = UDim2.new(0, 35, 0, 35)
Minimize.Position = UDim2.new(1, -80, 0, 8)
Minimize.Text = "─"
Minimize.BackgroundColor3 = Color3.fromRGB(100, 100, 120)
Minimize.TextColor3 = Color3.fromRGB(255, 255, 255)
Minimize.Font = Enum.Font.GothamBold
Minimize.TextSize = 16
Minimize.BorderSizePixel = 0

local minimizeGradient = Instance.new("UIGradient", Minimize)
minimizeGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 100, 120)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 80, 100))
}

Instance.new("UICorner", Minimize).CornerRadius = UDim.new(0, 8)

-- 修正：側邊欄為可滾動
local SideBar = Instance.new("ScrollingFrame", Frame)
SideBar.Size = UDim2.new(0, 130, 1, -55)
SideBar.Position = UDim2.new(0, 5, 0, 50)
SideBar.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
SideBar.BorderSizePixel = 0
SideBar.ScrollBarThickness = 6
SideBar.CanvasSize = UDim2.new(0, 0, 0, 200)
SideBar.AutomaticCanvasSize = Enum.AutomaticSize.Y
SideBar.ScrollingDirection = Enum.ScrollingDirection.Y

-- 添加側邊欄樣式
local sidebarGradient = Instance.new("UIGradient", SideBar)
sidebarGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 50)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(45, 45, 65))
}

Instance.new("UICorner", SideBar).CornerRadius = UDim.new(0, 10)

-- 添加UIListLayout到側邊欄
local sidebarLayout = Instance.new("UIListLayout", SideBar)
sidebarLayout.Padding = UDim.new(0, 8)
sidebarLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

-- 修正：內容區域
local Content = Instance.new("Frame", Frame)
Content.Size = UDim2.new(1, -145, 1, -55)
Content.Position = UDim2.new(0, 140, 0, 50)
Content.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
Content.BorderSizePixel = 0

local contentGradient = Instance.new("UIGradient", Content)
contentGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 60)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 75))
}

Instance.new("UICorner", Content).CornerRadius = UDim.new(0, 10)

-- 修正：縮小功能的尺寸
local isMinimized = false
local fullSize = UDim2.new(0, 450, 0, 350)
local miniSize = UDim2.new(0, 450, 0, 50)

Minimize.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    SideBar.Visible = not isMinimized
    Content.Visible = not isMinimized
    Frame.Size = isMinimized and miniSize or fullSize
end)

-- 修正：簡單高亮文字的分區按鈕樣式
local function createSectionButton(text, order, parent)
    local btn = Instance.new("TextButton", parent)
    btn.Size = UDim2.new(0, 120, 0, 45)
    btn.Text = text
    btn.BackgroundColor3 = Color3.fromRGB(85, 85, 105)
    
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextTransparency = 0
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 16
    btn.BorderSizePixel = 0
    
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 10)
    
    local btnStroke = Instance.new("UIStroke", btn)
    btnStroke.Color = Color3.fromRGB(150, 180, 255)
    btnStroke.Thickness = 1
    btnStroke.Transparency = 0.6
    
    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(105, 105, 125)
        btnStroke.Transparency = 0.3
    end)
    
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(85, 85, 105)
        btnStroke.Transparency = 0.6
    end)
    
    return btn
end

-- 添加滾動框樣式改善
local function styleScrollFrame(scrollFrame)
    scrollFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 65)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 150, 255)
    
    local scrollGradient = Instance.new("UIGradient", scrollFrame)
    scrollGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(45, 45, 65)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(55, 55, 80))
    }
    
    Instance.new("UICorner", scrollFrame).CornerRadius = UDim.new(0, 8)
end

-- 創建滾動按鈕的函數
local function createScrollButton(text, order, parent, height)
    local btn = Instance.new("TextButton", parent)
    btn.Size = UDim2.new(0, 180, 0, height or 40)
    btn.Position = UDim2.new(0.5, -90, 0, (order - 1) * (height + 10 or 50))
    btn.Text = text
    btn.BackgroundColor3 = Color3.fromRGB(80, 140, 220)
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 16
    btn.BorderSizePixel = 0
    
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 8)
    
    local btnStroke = Instance.new("UIStroke", btn)
    btnStroke.Color = Color3.fromRGB(100, 180, 255)
    btnStroke.Thickness = 1
    btnStroke.Transparency = 0.5
    
    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(100, 160, 240)
        btnStroke.Transparency = 0.2
    end)
    
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(80, 140, 220)
        btnStroke.Transparency = 0.5
    end)
    
    return btn
end

-- 創建文字輸入框的函數
local function createTextBox(placeholder, order, parent, height)
    local textBox = Instance.new("TextBox", parent)
    textBox.Size = UDim2.new(0, 180, 0, height or 40)
    textBox.Position = UDim2.new(0.5, -90, 0, (order - 1) * (height + 10 or 50))
    textBox.PlaceholderText = placeholder
    textBox.Text = ""
    textBox.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    textBox.Font = Enum.Font.Gotham
    textBox.TextSize = 14
    textBox.BorderSizePixel = 0
    textBox.ClearTextOnFocus = false
    
    Instance.new("UICorner", textBox).CornerRadius = UDim.new(0, 8)
    
    local textBoxStroke = Instance.new("UIStroke", textBox)
    textBoxStroke.Color = Color3.fromRGB(100, 150, 255)
    textBoxStroke.Thickness = 1
    textBoxStroke.Transparency = 0.7
    
    textBox.Focused:Connect(function()
        textBoxStroke.Transparency = 0.3
    end)
    
    textBox.FocusLost:Connect(function()
        textBoxStroke.Transparency = 0.7
    end)
    
    return textBox
end

-- 創建下拉選單的函數
local function createDropdown(options, order, parent, height)
    local dropdown = Instance.new("TextButton", parent)
    dropdown.Size = UDim2.new(0, 180, 0, height or 40)
    dropdown.Position = UDim2.new(0.5, -90, 0, (order - 1) * (height + 10 or 50))
    dropdown.Text = options[1] or "選擇選項"
    dropdown.BackgroundColor3 = Color3.fromRGB(70, 70, 90)
    dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.Font = Enum.Font.Gotham
    dropdown.TextSize = 14
    dropdown.BorderSizePixel = 0
    
    Instance.new("UICorner", dropdown).CornerRadius = UDim.new(0, 8)
    
    local dropdownStroke = Instance.new("UIStroke", dropdown)
    dropdownStroke.Color = Color3.fromRGB(100, 150, 255)
    dropdownStroke.Thickness = 1
    dropdownStroke.Transparency = 0.7
    
    local selectedIndex = 1
    local isOpen = false
    
    -- 創建下拉箭頭
    local arrow = Instance.new("TextLabel", dropdown)
    arrow.Size = UDim2.new(0, 20, 1, 0)
    arrow.Position = UDim2.new(1, -25, 0, 0)
    arrow.BackgroundTransparency = 1
    arrow.Text = "▼"
    arrow.TextColor3 = Color3.fromRGB(255, 255, 255)
    arrow.Font = Enum.Font.Gotham
    arrow.TextSize = 12
    arrow.TextXAlignment = Enum.TextXAlignment.Center
    arrow.TextYAlignment = Enum.TextYAlignment.Center
    
    -- 創建選項列表容器
    local optionsList = Instance.new("Frame", dropdown)
    optionsList.Size = UDim2.new(1, 0, 0, #options * 35)
    optionsList.Position = UDim2.new(0, 0, 1, 5)
    optionsList.BackgroundColor3 = Color3.fromRGB(70, 70, 90)
    optionsList.BorderSizePixel = 0
    optionsList.Visible = false
    optionsList.ZIndex = 100
    dropdown.ZIndex = 99
    
    Instance.new("UICorner", optionsList).CornerRadius = UDim.new(0, 8)
    
    local optionsStroke = Instance.new("UIStroke", optionsList)
    optionsStroke.Color = Color3.fromRGB(100, 150, 255)
    optionsStroke.Thickness = 1
    optionsStroke.Transparency = 0.5
    
    -- 創建選項按鈕
    for i, option in ipairs(options) do
        local optionBtn = Instance.new("TextButton", optionsList)
        optionBtn.Size = UDim2.new(1, -4, 0, 30)
        optionBtn.Position = UDim2.new(0, 2, 0, (i - 1) * 35 + 2)
        optionBtn.Text = option
        optionBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 90)
        optionBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionBtn.Font = Enum.Font.Gotham
        optionBtn.TextSize = 13
        optionBtn.BorderSizePixel = 0
        optionBtn.ZIndex = 101
        
        Instance.new("UICorner", optionBtn).CornerRadius = UDim.new(0, 6)
        
        optionBtn.MouseEnter:Connect(function()
            optionBtn.BackgroundColor3 = Color3.fromRGB(90, 90, 110)
        end)
        
        optionBtn.MouseLeave:Connect(function()
            optionBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 90)
        end)
        
        optionBtn.MouseButton1Click:Connect(function()
            selectedIndex = i
            dropdown.Text = option
            optionsList.Visible = false
            isOpen = false
            arrow.Text = "▼"
        end)
    end
    
    -- 主按鈕點擊事件
    dropdown.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        optionsList.Visible = isOpen
        arrow.Text = isOpen and "▲" or "▼"
    end)
    
    -- 返回下拉選單和獲取選擇的函數
    local function getSelection()
        return selectedIndex, options[selectedIndex]
    end
    
    return dropdown, getSelection
end

-- =================================
-- 修改版：車鑰匙精通分區（觸控版）
-- =================================

-- 創建車鑰匙精通分區按鈕
local CarMasterySection = createSectionButton("車鑰匙精通", 1, SideBar)

-- 創建車鑰匙精通內容區域
local CarMasteryContent = Instance.new("ScrollingFrame", Content)
CarMasteryContent.Size = UDim2.new(1, -10, 1, -10)
CarMasteryContent.Position = UDim2.new(0, 5, 0, 5)
CarMasteryContent.BackgroundTransparency = 1
CarMasteryContent.BorderSizePixel = 0
CarMasteryContent.ScrollBarThickness = 6
CarMasteryContent.CanvasSize = UDim2.new(0, 0, 0, 500)
CarMasteryContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
CarMasteryContent.ScrollingDirection = Enum.ScrollingDirection.Y
CarMasteryContent.Visible = true

styleScrollFrame(CarMasteryContent)

-- 分區按鈕點擊事件
CarMasterySection.MouseButton1Click:Connect(function()
    for _, child in pairs(Content:GetChildren()) do
        if child:IsA("ScrollingFrame") then
            child.Visible = false
        end
    end
    CarMasteryContent.Visible = true
end)

-- 虛擬按鍵移動功能變數
local isAutoMoving = false
local autoMoveConnection = nil
local moveStartTime = 0
local currentDirection = "W" -- "W"(前進), "S"(後退), "STOP"(停止)
local movePhase = "moving" -- "moving"(移動中), "stopping"(停止中)
local phaseStartTime = 0

-- 幫助模式功能變數 (修改版)
local isHelperMode = false
local helperConnection = nil
local ragdollConnection = nil
local lastHelperMoveTime = 0
local lastPositionUpdateTime = 0 -- 新增：位置更新計時器
local HELPER_HEIGHT_INTERVAL = 0.1 -- 高度同步間隔：0.1秒
local HELPER_POSITION_INTERVAL = 3 -- 位置移動間隔：3秒
local targetPlayerName = ""
local helperMode = "normal" -- "normal" 或 "reset"
local targetXZ = nil -- 存儲目標的X、Z坐標
local helpModeLoop = nil -- 添加幫助模式循環變數

-- 創建玩家名稱輸入框
local PlayerNameInput = createTextBox("輸入玩家名稱", 1, CarMasteryContent, 45)

-- 創建模式選擇下拉選單
local ModeDropdown, getModeSelection = createDropdown({"被撞後不重置", "被撞後重置"}, 2, CarMasteryContent, 45)

-- 創建幫助模式按鈕
local HelperModeButton = createScrollButton("開始幫助模式", 3, CarMasteryContent, 45)

-- 創建虛擬按鍵移動按鈕
local VirtualMoveButton = createScrollButton("虛擬按鍵移動", 4, CarMasteryContent, 45)

-- 創建狀態顯示標籤
local StatusLabel = Instance.new("TextLabel", CarMasteryContent)
StatusLabel.Size = UDim2.new(0, 180, 0, 25)
StatusLabel.Position = UDim2.new(0.5, -90, 0, 230)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "狀態：停止"
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.TextSize = 14
StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
StatusLabel.TextXAlignment = Enum.TextXAlignment.Center

-- 修復版：尋找指定名稱玩家的函數
local function findPlayerByName(playerName)
    if not playerName or playerName == "" then
        return nil
    end
    
    -- 完全匹配
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Name == playerName then
            return player
        end
    end
    
    -- 部分匹配（不區分大小寫）
    local lowerName = playerName:lower()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Name:lower():find(lowerName) then
            return player
        end
    end
    
    return nil
end

-- 新版：計算目標位置的函數（分離高度和XZ坐標）
local function calculateTargetPosition(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return nil, nil
    end
    
    local targetRootPart = targetPlayer.Character.HumanoidRootPart
    local targetPosition = targetRootPart.Position
    local targetLookDirection = targetRootPart.CFrame.LookVector
    
    -- 計算目標玩家面向方向前5單位的X、Z坐標（改為5單位）
    local targetXZPosition = Vector3.new(
        targetPosition.X + (targetLookDirection.X * 5),
        0, -- Y坐標暫時設為0，後面會單獨處理
        targetPosition.Z + (targetLookDirection.Z * 5)
    )
    
    -- 返回目標的Y坐標+2（高度偏移）和XZ位置
    return targetPosition.Y + 2, targetXZPosition
end

-- 新版：移動到指定位置的函數（支持只更新高度或完整移動）
local function moveToPosition(targetY, targetXZ, onlyHeight)
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local humanoidRootPart = LocalPlayer.Character.HumanoidRootPart
    local currentPosition = humanoidRootPart.Position
    
    local newPosition
    if onlyHeight then
        -- 只更新Y坐標（高度），保持當前的X、Z坐標
        newPosition = Vector3.new(currentPosition.X, targetY, currentPosition.Z)
    else
        -- 完整移動：使用目標的XZ坐標和Y坐標
        newPosition = Vector3.new(targetXZ.X, targetY, targetXZ.Z)
    end
    
    local newCFrame = CFrame.new(newPosition, newPosition + humanoidRootPart.CFrame.LookVector)
    
    -- 使用 pcall 來安全設置屬性
    pcall(function()
        humanoidRootPart.CFrame = newCFrame
        humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
        
        -- 嘗試設置 AngularVelocity，如果不存在就跳過
        if humanoidRootPart:FindFirstChild("AngularVelocity") then
            humanoidRootPart.AngularVelocity = Vector3.new(0, 0, 0)
        elseif humanoidRootPart:FindFirstChild("BodyAngularVelocity") then
            humanoidRootPart.BodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
        end
    end)
    
    return true
end

-- 檢查 Ragdoll 狀態的函數
local function isInRagdoll()
    if not LocalPlayer.Character then return false end
    
    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if not humanoid then return false end
    
    -- 檢查 PlatformStand（常見的 ragdoll 指標）
    if humanoid.PlatformStand then return true end
    
    -- 檢查 Sit 狀態（某些遊戲用這個表示 ragdoll）
    if humanoid.Sit then return true end
    
    -- 檢查 StateType 是否為 Physics（物理狀態）
    if humanoid:GetState() == Enum.HumanoidStateType.Physics then return true end
    
    return false
end

-- 新版：幫助模式主要執行函數
local function executeHelperMode()
    if not isHelperMode then return false end
    
    local currentTime = tick()
    local targetPlayer = findPlayerByName(targetPlayerName)
    
    if not targetPlayer then
        return nil
    end
    
    local targetY, targetXZPosition = calculateTargetPosition(targetPlayer)
    if not targetY or not targetXZPosition then
        return nil
    end
    
    -- 檢查是否需要更新XZ位置（每3秒）
    local shouldUpdatePosition = (currentTime - lastPositionUpdateTime) >= HELPER_POSITION_INTERVAL
    
    if shouldUpdatePosition then
        -- 完整移動：更新XZ坐標和Y坐標
        if moveToPosition(targetY, targetXZPosition, false) then
            targetXZ = targetXZPosition -- 更新存儲的目標XZ坐標
            lastPositionUpdateTime = currentTime
            return targetPlayer.Name, "完整移動"
        end
    else
        -- 只更新高度：保持當前XZ坐標，只同步Y坐標
        if moveToPosition(targetY, nil, true) then
            return targetPlayer.Name, "高度同步"
        end
    end
    
    return nil
end

-- 新版：幫助模式功能（參考俠屏障精通的重置邏輯）
HelperModeButton.MouseButton1Click:Connect(function()
    if not isHelperMode then
        -- 檢查是否有輸入玩家名稱
        if PlayerNameInput.Text == "" then
            StatusLabel.Text = "狀態：請輸入玩家名稱"
            return
        end
        
        -- 開始幫助模式
        print("啟動幫助模式")
        isHelperMode = true
        targetPlayerName = PlayerNameInput.Text
        local _, selectedMode = getModeSelection()
        helperMode = selectedMode == "被撞後重置" and "reset" or "normal"
        lastHelperMoveTime = tick()
        lastPositionUpdateTime = 0 -- 重置位置更新計時器，確保立即執行一次完整移動
        targetXZ = nil
        HelperModeButton.Text = "停止幫助模式"
        HelperModeButton.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
        
        -- 創建新的幫助模式循環
        helpModeLoop = task.spawn(function()
            while isHelperMode do
                local character = LocalPlayer.Character
                if not character then
                    character = LocalPlayer.CharacterAdded:Wait()
                end
                
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 10)
                local humanoid = character:WaitForChild("Humanoid", 10)
                
                if not humanoidRootPart or not humanoid then
                    task.wait(0.5)
                    continue
                end
                
                if humanoid.Health <= 0 then
                    task.wait(0.3)
                    continue
                end
                
                pcall(function()
                    -- 只有在重置模式下才會傳送到 Lobby.Teleport1
                    if helperMode == "reset" then
                        local teleport1 = Workspace.Lobby:FindFirstChild("Teleport1")
                        if teleport1 and isHelperMode then
                            humanoidRootPart.CFrame = teleport1.CFrame
                            task.wait(0.3)
                        end
                    end
                    
                    -- 持續跟隨目標玩家
                    local targetPlayer = findPlayerByName(targetPlayerName)
                    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and isHelperMode then
                        lastPositionUpdateTime = 0 -- 重置位置更新計時器
                        
                        -- 持續移動直到檢測到 ragdoll
                        while isHelperMode and character.Parent and humanoid.Health > 0 do
                            
                            -- 檢查是否進入 ragdoll 狀態
                            if isInRagdoll() then
                                task.wait(0.5) -- 等待0.5秒
                                
                                if helperMode == "reset" then
                                    -- 重置模式：執行完整重置流程
                                    -- 安全傳送到指定坐標
                                    pcall(function()
                                        if humanoidRootPart and humanoidRootPart.Parent then
                                            humanoidRootPart.CFrame = CFrame.new(263, 13, 197)
                                        end
                                    end)
                                    
                                    task.wait(0.2)
                                    
                                    -- 安全重置
                                    pcall(function()
                                        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                                            LocalPlayer.Character.Humanoid:TakeDamage(LocalPlayer.Character.Humanoid.MaxHealth)
                                        end
                                    end)
                                    
                                    -- 等待重置完成和新角色載入
                                    local resetStartTime = tick()
                                    repeat
                                        task.wait(0.2)
                                        if tick() - resetStartTime > 3 then
                                            break
                                        end
                                    until not LocalPlayer.Character or LocalPlayer.Character.Humanoid.Health <= 0
                                    
                                    -- 等待新角色
                                    local newCharacter = nil
                                    local waitStartTime = tick()
                                    repeat
                                        task.wait(0.2)
                                        newCharacter = LocalPlayer.Character
                                        if tick() - waitStartTime > 3 then
                                            break
                                        end
                                    until newCharacter and newCharacter:FindFirstChild("HumanoidRootPart") and 
                                          newCharacter:FindFirstChild("Humanoid") and newCharacter.Humanoid.Health > 0
                                    
                                    -- 傳送到紅門並等待0.5秒
                                    pcall(function()
                                        local teleport1 = Workspace.Lobby:FindFirstChild("Teleport1")
                                        if teleport1 and newCharacter and newCharacter:FindFirstChild("HumanoidRootPart") then
                                            newCharacter.HumanoidRootPart.CFrame = teleport1.CFrame
                                            task.wait(0.5) -- 確定碰到紅門0.5秒後才能移動
                                        end
                                    end)
                                    
                                    -- 移動到目標玩家面向方向5單位
                                    pcall(function()
                                        local targetPlayer = findPlayerByName(targetPlayerName)
                                        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and 
                                           newCharacter and newCharacter:FindFirstChild("HumanoidRootPart") then
                                            local targetRoot = targetPlayer.Character.HumanoidRootPart
                                            local targetLookDirection = targetRoot.CFrame.LookVector
                                            local newPos = targetRoot.Position + (targetLookDirection * 5) + Vector3.new(0, 2, 0)
                                            newCharacter.HumanoidRootPart.CFrame = CFrame.new(newPos, newPos + targetLookDirection)
                                        end
                                    end)
                                    
                                    task.wait(0.3)
                                    break
                                else
                                    -- 不重置模式：被撞後不做任何特殊處理，直接跳出循環繼續正常跟隨
                                    break
                                end
                            end
                            
                            -- 每0.1秒執行一次位置更新
                            local currentTime = tick()
                            if currentTime - lastHelperMoveTime >= 0.1 then
                                lastHelperMoveTime = currentTime
                                
                                local playerName, moveType = executeHelperMode()
                                if playerName then
                                    if moveType == "完整移動" then
                                        StatusLabel.Text = "狀態：跟隨 " .. playerName .. " (位置更新)"
                                    else
                                        StatusLabel.Text = "狀態：跟隨 " .. playerName .. " (高度同步)"
                                    end
                                else
                                    StatusLabel.Text = "狀態：找不到玩家 " .. targetPlayerName
                                end
                            end
                            
                            task.wait(0.05)
                        end
                    end
                end)
                
                if isHelperMode then
                    task.wait(1)
                end
            end
        end)
        
    else
        -- 停止幫助模式
        print("停止幫助模式")
        isHelperMode = false
        HelperModeButton.Text = "開始幫助模式"
        HelperModeButton.BackgroundColor3 = Color3.fromRGB(80, 140, 220)
        StatusLabel.Text = "狀態：停止"
        targetXZ = nil
        
        -- 取消幫助模式循環
        if helpModeLoop then
            task.cancel(helpModeLoop)
            helpModeLoop = nil
        end
        
        -- 斷開連接
        if helperConnection then
            helperConnection:Disconnect()
            helperConnection = nil
        end
        if ragdollConnection then
            ragdollConnection:Disconnect()
            ragdollConnection = nil
        end
    end
end)

-- 虛擬按鍵移動功能
local function simulateKeyPress(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
end

local function simulateKeyRelease(key)
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

-- 自動虛擬按鍵移動功能
VirtualMoveButton.MouseButton1Click:Connect(function()
    if not isAutoMoving then
        -- 開始自動移動
        isAutoMoving = true
        moveStartTime = tick()
        phaseStartTime = tick()
        currentDirection = "W"
        movePhase = "moving"
        VirtualMoveButton.Text = "停止虛擬移動"
        VirtualMoveButton.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
        StatusLabel.Text = "狀態：前進中"
        
        -- 開始按下前進鍵
        simulateKeyPress(Enum.KeyCode.W)
        
        -- 自動移動循環
        autoMoveConnection = RunService.Heartbeat:Connect(function()
            local currentTime = tick()
            local phaseElapsedTime = currentTime - phaseStartTime
            
            if movePhase == "moving" then
                -- 移動階段 - 持續3秒
                if phaseElapsedTime >= 3 then
                    -- 釋放當前按鍵，進入停止階段
                    simulateKeyRelease(Enum.KeyCode[currentDirection])
                    movePhase = "stopping"
                    phaseStartTime = currentTime
                    StatusLabel.Text = "狀態：等速歸零中..."
                end
            elseif movePhase == "stopping" then
                -- 停止階段 - 持續1秒讓速度歸零
                if phaseElapsedTime >= 1 then
                    -- 切換方向並開始移動
                    if currentDirection == "W" then
                        currentDirection = "S"
                        StatusLabel.Text = "狀態：後退中"
                    else
                        currentDirection = "W"
                        StatusLabel.Text = "狀態：前進中"
                    end
                    
                    -- 按下新的按鍵
                    simulateKeyPress(Enum.KeyCode[currentDirection])
                    movePhase = "moving"
                    phaseStartTime = currentTime
                end
            end
        end)
    else
        -- 停止自動移動
        isAutoMoving = false
        VirtualMoveButton.Text = "虛擬按鍵移動"
        VirtualMoveButton.BackgroundColor3 = Color3.fromRGB(80, 140, 220)
        StatusLabel.Text = "狀態：停止"
        
        if autoMoveConnection then
            autoMoveConnection:Disconnect()
            autoMoveConnection = nil
        end
        
        -- 釋放當前按下的按鍵
        simulateKeyRelease(Enum.KeyCode[currentDirection])
    end
end)

-- 當GUI被銷毀時清理所有連接
ScreenGui.AncestryChanged:Connect(function()
    if not ScreenGui.Parent then
        -- 清理幫助模式連接
        if helperConnection then
            helperConnection:Disconnect()
            helperConnection = nil
        end
        if ragdollConnection then
            ragdollConnection:Disconnect()
            ragdollConnection = nil
        end
        if helpModeLoop then
            task.cancel(helpModeLoop)
            helpModeLoop = nil
        end
        -- 清理虛擬移動連接
        if autoMoveConnection then
            autoMoveConnection:Disconnect()
            autoMoveConnection = nil
        end
        -- 確保釋放所有按鍵
        for _, key in pairs({"W", "S"}) do
            pcall(function()
                simulateKeyRelease(Enum.KeyCode[key])
            end)
        end
        -- 重置所有狀態
        isHelperMode = false
        isAutoMoving = false
        targetXZ = nil
    end
end)
